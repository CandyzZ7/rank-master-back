// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"rank-master-back/infrastructure/pkg/es"
	"rank-master-back/infrastructure/pkg/mq"
	"rank-master-back/infrastructure/pkg/ormengine"
	"rank-master-back/infrastructure/pkg/rdb"
	"rank-master-back/infrastructure/pkg/uploadfile/oss"
	"rank-master-back/internal/cache"
	"rank-master-back/internal/config"
	"rank-master-back/internal/repository"
	"rank-master-back/internal/svc"
)

import (
	_ "embed"
)

// Injectors from wire.go:

func InitializeServiceContext(c config.Config) (svc.ServiceContext, error) {
	db, err := ormengine.NewGormEngine(c)
	if err != nil {
		return svc.ServiceContext{}, err
	}
	redis, err := rdb.NewRdbClient(c)
	if err != nil {
		return svc.ServiceContext{}, err
	}
	pusher := mq.NewPusher(c)
	esEs, err := es.NewEs(c)
	if err != nil {
		return svc.ServiceContext{}, err
	}
	client, err := oss.NewOssClient(c)
	if err != nil {
		return svc.ServiceContext{}, err
	}
	iTemplate := repository.NewTemplateDao()
	iUserCache := cache.NewUserCache(c)
	iUser := repository.NewUserDao(iUserCache)
	serviceContext := svc.ServiceContext{
		Config:         c,
		DB:             db,
		RDB:            redis,
		KqPusherClient: pusher,
		Es:             esEs,
		Oss:            client,
		TemplateDao:    iTemplate,
		UserDao:        iUser,
	}
	return serviceContext, nil
}

// wire.go:

var RepositorySet = wire.NewSet(repository.NewTemplateDao, repository.NewUserDao)

var CacheSet = wire.NewSet(cache.NewUserCache)
