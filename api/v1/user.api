syntax = "v1"

info(
    title: "type title here"
    desc: "type desc here"
    author: "type author here"
    email: "type email here"
    version: "type version here"
)

type Token {
    AccessToken  string `json:"access_token"`
    AccessExpire int64  `json:"access_expire"`
}

type User{
    Name             string `json:"name" validate:"required"` // 昵称
    RankMasterAccount string `json:"rank_master_account" validate:"required"` // RankMaster账号
    Mobile           string `json:"mobile" validate:"required,len=11,numeric"` // 手机号
    Avatar           string `json:"avatar" validate:"required"` // 头像
    Email            string `json:"email" validate:"required,email"` // 邮箱
    Code             string `json:"code" validate:"required"` // 邮箱验证码
    Password         string `json:"password" validate:"required"`   // 密码
}

type (
    RegisterReq {
        User User `json:"user"`
    }
    RegisterResp {
        UserId string `json:"user_id"` // 用户ID
        Token  Token `json:"token"`  // token
    }
)

type (
    LoginReq {
        RankMasterAccount string `json:"rank_master_account" validate:"required"` // RankMaster账号
        Password         string `json:"password" validate:"required"`  // 密码
    }
    LoginResp {
        UserId string `json:"user_id"` // 用户ID
        Token  Token `json:"token"` // token
    }
)

type (
    GetEmailCodeReq {
        Email string `json:"email" validate:"required,email"` // 邮箱
    }
    GetEmailCodeResp {
    }
)

type (
    GetRankMasterAccountReq{
        RankMasterAccount string `path:"rank_master_account" validate:"required"` // RankMaster账号
    }
    GetRankMasterAccountResp{}
)

type (
    GetUserInfoReq{}
    GetUserInfoResp{
        User User `json:"user"`
    }
)


@server (
    group: v1/user
    prefix: /v1/user
)
service app {
    @doc "注册"
    @handler Register
    post /register (RegisterReq) returns (RegisterResp)

    @doc "登录"
    @handler Login
    post /login (LoginReq) returns (LoginResp)

    @doc "获取邮箱验证码"
    @handler GetEmailCode
    post /email/code (GetEmailCodeReq) returns (GetEmailCodeResp)

    @doc "验证用户账号是否存在"
    @handler GetRankMasterAccount
    get /:rank_master_account (GetRankMasterAccountReq) returns (GetRankMasterAccountResp)
}

@server (
    group: v1/user
    prefix: /v1/user
    jwt: Auth
)
service app {
    @doc "用户信息"
    @handler UserInfo
    get /user_info returns (GetUserInfoResp)
}